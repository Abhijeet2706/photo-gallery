{"version":3,"sources":["constant/constant.js","layout/App.js","core/Button.js","component/SearchBar.js","hooks/useGetPaginatedImagesByKeyword.js","component/UserImageDatail.js","component/ImageListLayout.js","hooks/useModal.js","core/Modal.js","component/ImageView.js","core/TopBar.js","component/HomeLayout.js","Route/Route.js","serviceWorker.js","index.js"],"names":["accessKey","RoutesPath","HomeLayout","searchKeyword","imageView","PAGINATION_PAGE_SIZE","global","fetch","UNSPLASH","Unsplash","App","className","Button","onClick","disabled","props","SearchBar","imageSearchKeyword","onImageSearchKeywordChange","useState","searchBarInputValue","setSearchBarInputValue","handleOnImageSearchKeywordChange","useEffect","type","onKeyDown","event","key","value","placeholder","onChange","target","IconButton","edge","color","aria-label","fontSize","style","useGetPaginatedImagesByKeyword","page","pageSize","images","setImages","isLoading","setIsLoading","totalPages","setTotalPages","search","photos","orientation","then","toJson","json","prevImages","results","total_pages","finally","UserImageDatail","image","onImageClick","id","user","userName","name","userProfileImage","profile_image","medium","thumb","urls","background","backgroundRepeat","backgroundSize","src","alt","ImageListLayout","history","useHistory","currentPage","setCurrentPage","getPagination","handleImageClick","push","map","useModal","imageId","isShowing","setIsShowing","hide","useCallback","Modal","children","ReactDOM","createPortal","Fragment","aria-modal","aria-hidden","tabIndex","role","document","body","ImageView","setImage","error","setError","handleModalHide","getPhoto","catch","console","log","imageUrl","full","imageAlt","alt_description","width","height","downloadPhoto","response","url","reader","getReader","ReadableStream","start","controller","pump","read","done","enqueue","close","stream","Response","blob","URL","createObjectURL","link","createElement","href","download","appendChild","click","removeChild","err","message","TopBar","classes","this","root","AppBar","position","Toolbar","title","Component","withStyles","theme","grow","flexGrow","display","breakpoints","up","Home","match","setImageId","setImageSearchKeyword","params","routes","exact","path","component","from","to","Boolean","window","location","hostname","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68ae0aa6.chunk.js","sourcesContent":["export const accessKey = \"aBvz8CNST9rLABaVxZ7M6HXOvsPT2EW393X_sMFu2pI\";\n\nexport const RoutesPath = {\n    HomeLayout: \"/\",\n    searchKeyword: \"/:searchKeyword\",\n    imageView: \"/:searchKeyword/:imageId\",\n  };\n  \nexport const PAGINATION_PAGE_SIZE = 9;\n  ","import React from \"react\";\nimport \"../assets/styles/App.css\";\nimport Routes from \"../Route/Route\";\nimport fetch from \"node-fetch\";\nimport Unsplash from \"unsplash-js\";\nimport { accessKey } from \"../constant/constant\"\n\nglobal.fetch = fetch;\nexport const UNSPLASH = new Unsplash({\n  accessKey: accessKey,\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport \"../assets/styles/Button.css\";\n\nconst Button = ({ onClick, className, disabled, ...props }) => {\n  return (\n    <button\n      onClick={onClick}\n      disabled={disabled}\n      className=\"button\"\n      {...props}\n    />\n  );\n};\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"../core/Button\";\nimport IconButton from '@material-ui/core/IconButton';\nimport ImageSearchIcon from '@material-ui/icons/ImageSearch';\nimport \"../assets/styles/SearchBar.css\";\n\nconst SearchBar = ({ imageSearchKeyword, onImageSearchKeywordChange }) => {\n  const [searchBarInputValue, setSearchBarInputValue] = useState(\"\");\n  const placeholder = \"Please enter text to search images\";\n\n  const handleOnImageSearchKeywordChange = () => {\n    onImageSearchKeywordChange(searchBarInputValue);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      handleOnImageSearchKeywordChange();\n    }\n  };\n\n  const handleSearchBarInputValueChange = (event) => {\n    setSearchBarInputValue(event.target.value);\n  };\n\n  useEffect(() => {\n    setSearchBarInputValue(imageSearchKeyword);\n  }, [imageSearchKeyword]);\n\n  return (\n    <div className=\"searchBarContainer\">\n      <input\n        type=\"text\"\n        onKeyDown={handleKeyDown}\n        value={searchBarInputValue}\n        placeholder={placeholder}\n        className=\"searchBarInputBox\"\n        onChange={handleSearchBarInputValueChange}\n      />\n        <IconButton edge=\"start\" className=\"searchButton\" onClick={handleOnImageSearchKeywordChange} color=\"inherit\" aria-label=\"menu\">\n              <ImageSearchIcon fontSize=\"large\" style={{ color: \"#07bdbe\" }}/>\n        </IconButton>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import { useEffect, useState } from \"react\";\nimport { toJson } from \"unsplash-js\";\nimport { UNSPLASH } from \"../layout/App\";\nimport { PAGINATION_PAGE_SIZE } from \"../constant/constant\";\n\nfunction useGetPaginatedImagesByKeyword(\n  imageSearchKeyword = \"\",\n  page = 1,\n  pageSize = PAGINATION_PAGE_SIZE\n) {\n  const [images, setImages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n\n  useEffect(() => {\n    if (imageSearchKeyword) {\n      setIsLoading(true);\n      UNSPLASH.search\n        .photos(imageSearchKeyword, page, pageSize, { orientation: \"portrait\" })\n        .then(toJson)\n        .then((json) => {\n          if (page > 1) {\n            setImages((prevImages) => [...prevImages, ...json.results]);\n          } else {\n            setImages(json.results);\n            setTotalPages(json.total_pages);\n          }\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [imageSearchKeyword, page, pageSize]);\n\n  return [images, totalPages, isLoading];\n}\n\nexport default useGetPaginatedImagesByKeyword;\n","import React from \"react\";\nimport styles from \"../assets/styles/UserImageDatail.css\";\n\nconst UserImageDatail = ({ image, onImageClick }) => {\n  const {\n    id,\n    user: {\n      name: userName,\n      profile_image: { medium: userProfileImage },\n    },\n    urls: { thumb },\n  } = image;\n\n  const handleImageClick = () => {\n    onImageClick(id);\n  };\n\n  return (\n    <div\n      className=\"imageContainer\"\n      style={{\n        background: `url(${thumb})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n      }}\n      onClick={handleImageClick}\n    >\n      <div className=\"userInformation\">\n        <img src={userProfileImage} alt=\"User Profile\" />\n        <p>\n          Image by <span>{userName}</span>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default UserImageDatail;\n","import React, { useEffect, useState } from \"react\";\nimport getPagination from \"../hooks/useGetPaginatedImagesByKeyword\";\nimport UserImageDatail from \"./UserImageDatail\";\nimport \"../assets/styles/ImageListLayout.css\";\nimport Button from \"../core/Button\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ImageListLayout = ({ imageSearchKeyword }) => {\n  const history = useHistory();\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const [images, totalPages, isLoading] = getPagination(\n    imageSearchKeyword,\n    currentPage\n  );\n\n  const handleLoadMore = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const handleImageClick = (id) => {\n    history.push(`/${imageSearchKeyword}/${id}`);\n  };\n\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [imageSearchKeyword]);\n\n  return (\n    <div>\n      <div className=\"imageListContainer\">\n        {images &&\n          images.map((image) => (\n            <UserImageDatail\n              key={image.id}\n              image={image}\n              onImageClick={handleImageClick}\n            />\n          ))}\n      </div>\n      {currentPage < totalPages && (\n        <div className=\"loadMoreButtonContainer\">\n          <Button\n            className=\"loadMoreButton\"\n            onClick={handleLoadMore}\n            disabled={isLoading}\n          >\n            {isLoading ? \"Loading...\" : \"Load more\"}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageListLayout;\n","import { useState, useEffect, useCallback } from \"react\";\n\nconst useModal = (imageId = null) => {\n  const [isShowing, setIsShowing] = useState(false);\n\n  const hide = useCallback(() => {\n    setIsShowing(false);\n  }, []);\n\n  useEffect(() => {\n    if (imageId) {\n      setIsShowing(true);\n    }\n  }, [imageId]);\n\n  return {\n    isShowing,\n    hide,\n  };\n};\n\nexport default useModal;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../assets/styles/Modal.css\";\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst Modal = ({ isShowing, hide, children }) =>\n  isShowing\n    ? ReactDOM.createPortal(\n        <React.Fragment>\n          <div\n            className=\"modalWrapper\"\n            aria-modal\n            aria-hidden\n            tabIndex={-1}\n            role=\"dialog\"\n          >\n            <div onClick={hide} className=\"modalOverlay\" />\n            <div className=\"modal\">\n              <div className=\"modalHeader\">\n                <IconButton className=\"modalCloseButton\" onClick={hide} color=\"primary\" aria-label=\"menu\">\n                    <CancelIcon fontSize=\"large\" />\n                </IconButton>\n              </div>\n              {children}\n            </div>\n          </div>\n        </React.Fragment>,\n        document.body\n      )\n    : null;\n\nexport default Modal;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport useModal from \"../hooks/useModal\";\nimport Modal from \"../core/Modal\";\nimport { UNSPLASH } from \"../layout/App\";\nimport { useHistory } from \"react-router-dom\";\nimport { toJson } from \"unsplash-js\";\nimport Button from \"../core/Button\";\nimport \"../assets/styles/ImageView.css\";\n\nconst ImageView = ({ imageSearchKeyword, imageId }) => {\n  const history = useHistory();\n  const [image, setImage] = useState();\n  const [error, setError] = useState();\n  const { isShowing, hide } = useModal(imageId);\n\n  const handleModalHide = useCallback(() => {\n    history.push(`/${imageSearchKeyword}`);\n    hide();\n  }, [history, imageSearchKeyword, hide]);\n\n  const handleDownloadPhoto = () => {\n    UNSPLASH.photos\n      .downloadPhoto(image)\n      .then(toJson)\n      .then((response) => {\n        fetch(response.url)\n          .then((response) => {\n            const reader = response.body.getReader();\n            return new ReadableStream({\n              start(controller) {\n                return pump();\n                function pump() {\n                  return reader.read().then(({ done, value }) => {\n                    // When no more data needs to be consumed, close the stream\n                    if (done) {\n                      controller.close();\n                      return;\n                    }\n                    // Enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    return pump();\n                  });\n                }\n              },\n            });\n          })\n          .then((stream) => new Response(stream))\n          .then((response) => response.blob())\n          .then((blob) => URL.createObjectURL(blob))\n          .then((url) => {\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.download = \"download.jpg\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          })\n          .catch((err) => console.error(err));\n      });\n  };\n\n  useEffect(() => {\n    setError(null);\n    setImage(null);\n    if (imageId) {\n      UNSPLASH.photos\n        .getPhoto(imageId)\n        .then(toJson)\n        .then((json) => {\n          setImage(json);\n        })\n        .catch((error) => {\n          console.log(error);\n          setError(error);\n        });\n    } else {\n      handleModalHide();\n    }\n  }, [imageId, handleModalHide]);\n\n  const imageUrl = image && image.urls && image.urls.full;\n  const imageAlt = image && image.alt_description;\n\n  return (\n    <Modal isShowing={isShowing} hide={handleModalHide}>\n      {imageUrl && (\n        <div>\n          <div className=\"modalImageContainer\">\n            <img\n              src={image.urls.full}\n              width={\"100%\"}\n              height={\"100%\"}\n              alt={imageAlt || \"Image\"}\n            />\n            <Button\n              onClick={handleDownloadPhoto}\n              className=\"downloadButton\"\n            >\n              Download Image\n            </Button>\n          </div>\n        </div>\n      )}\n      {error &&\n        ((error.message && <div>{error.message}</div>) || (\n          <div>{\"Something went wrong!\"}</div>\n        ))}\n    </Modal>\n  );\n};\n\nexport default ImageView;\n","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { withStyles } from '@material-ui/core/styles';\nclass TopBar extends Component{\n\n  render(){\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <div className=\"title\">\n            {this.props.title}\n            </div>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n\n\n}\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    background: '#07bdbe'\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  }\n});\nexport default withStyles(styles)(TopBar);\n","import React, { useState, useEffect } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport ImageListLayout from \"./ImageListLayout\";\nimport ImageView from \"./ImageView\";\nimport TopBar from '../core/TopBar'\n\nconst Home = ({ match }) => {\n  const [imageId, setImageId] = useState(null);\n  const [imageSearchKeyword, setImageSearchKeyword] = useState(\"\");\n\n  const handleImageSearchKeywordChange = (imageSearchKeyword) => {\n    setImageSearchKeyword(imageSearchKeyword);\n  };\n\n  useEffect(() => {\n    if (match.params && match.params.searchKeyword) {\n      setImageSearchKeyword(match.params.searchKeyword);\n      if (match.params.imageId) {\n        setImageId(match.params.imageId);\n      } else {\n        setImageId(\"\");\n      }\n    }\n  }, [match.params, match.params.searchKeyword]);\n\n  return (\n    <div>\n      <TopBar title={\"React image search engine app\"} />\n      <SearchBar\n        imageSearchKeyword={imageSearchKeyword}\n        onImageSearchKeywordChange={handleImageSearchKeywordChange}\n      />\n      <ImageListLayout imageSearchKeyword={imageSearchKeyword} />\n      <ImageView imageId={imageId} imageSearchKeyword={imageSearchKeyword} />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport { RoutesPath } from \"../constant/constant\";\n\nimport HomeLayout from \"../component/HomeLayout\";\n\nconst routes = () => (\n  <Router>\n    <Switch>\n      <Route exact path={RoutesPath.HomeLayout} component={HomeLayout} />\n      <Route exact path={RoutesPath.searchKeyword} component={HomeLayout} />\n      <Route exact path={RoutesPath.imageView} component={HomeLayout} />\n      <Redirect from=\"*\" to={RoutesPath.HomeLayout} />\n    </Switch>\n  </Router>\n);\n\nexport default routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}